(undo-tree-save-format-version . 1)
"25a078116dd366bdd8bc21ca31926eb97ea20ffa"
[nil nil nil nil (25387 7350 885834 355000) 0 (:visualizer [1 1 1 #<marker in no buffer>])]
([nil current ((#("j" 0 1 (fontified nil face font-lock-string-face ws-butler-chg chg)) . -5975) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (5975 . 5976) (#("A13 " 0 4 (fontified t face font-lock-string-face)) . -5975) (undo-tree-id1053 . -4) (undo-tree-id1054 . -4) (undo-tree-id1055 . -4) (undo-tree-id1056 . -4) (undo-tree-id1057 . -4) (undo-tree-id1058 . -4) (undo-tree-id1059 . -4) (undo-tree-id1060 . -4) (undo-tree-id1061 . -4) (undo-tree-id1062 . -4) (undo-tree-id1063 . -4) (undo-tree-id1064 . -4) (undo-tree-id1065 . -4) 5979 (#("zipShapeWith " 0 13 (fontified t face font-lock-string-face)) . -5979) (undo-tree-id1066 . -13) (undo-tree-id1067 . -13) (undo-tree-id1068 . -13) (undo-tree-id1069 . -13) (undo-tree-id1070 . -13) (undo-tree-id1071 . -13) (undo-tree-id1072 . -13) (undo-tree-id1073 . -13) (undo-tree-id1074 . -13) (undo-tree-id1075 . -13) (undo-tree-id1076 . -13) (undo-tree-id1077 . -13) (undo-tree-id1078 . -13) 5992 (#("undefined" 0 9 (fontified t face font-lock-string-face)) . -5992) (undo-tree-id1079 . -9) (undo-tree-id1080 . -9) (undo-tree-id1081 . -9) (undo-tree-id1082 . -9) (undo-tree-id1083 . -9) (undo-tree-id1084 . -9) (undo-tree-id1085 . -9) (undo-tree-id1086 . -9) (undo-tree-id1087 . -9) (undo-tree-id1088 . -9) (undo-tree-id1089 . -9) (undo-tree-id1090 . -9) (undo-tree-id1091 . -9) 6001 (t 25387 6866 619172 91000)) nil (25387 7412 547882 684000) 0 nil] [nil nil ((nil rear-nonsticky nil 6005 . 6006) (nil fontified nil 6001 . 6006) (6001 . 6006) (t 25387 6866 619172 91000)) ((#("abcde" 0 4 (ws-butler-chg chg fontified nil face font-lock-string-face) 4 5 (ws-butler-chg chg fontified nil rear-nonsticky nil face font-lock-string-face)) . 6001) (undo-tree-id895 . -5) (undo-tree-id896 . -5) (undo-tree-id897 . -5) (undo-tree-id898 . -5) (undo-tree-id899 . -5) (undo-tree-id900 . -5) (undo-tree-id901 . -5) (undo-tree-id902 . -5) (undo-tree-id903 . -5) (undo-tree-id904 . -5) (undo-tree-id905 . -5) (undo-tree-id906 . -5) (undo-tree-id907 . -5) (undo-tree-id908 . -5) (undo-tree-id909 . -5) (undo-tree-id910 . -5) (undo-tree-id911 . -5) (undo-tree-id912 . -5) (undo-tree-id913 . -5) (undo-tree-id914 . -5) (undo-tree-id915 . -5) (undo-tree-id916 . -5) (undo-tree-id917 . -5) (undo-tree-id918 . -5) (undo-tree-id919 . -5) (undo-tree-id920 . -5) (undo-tree-id921 . -5) (undo-tree-id922 . -5) (undo-tree-id923 . -5) (undo-tree-id924 . -5) (undo-tree-id925 . -5) (undo-tree-id926 . -5) (undo-tree-id927 . -5) (undo-tree-id928 . -5) (undo-tree-id929 . -5) (undo-tree-id930 . -5) (undo-tree-id931 . -5) (undo-tree-id932 . -5) (undo-tree-id933 . -5) (undo-tree-id934 . -5) (undo-tree-id935 . -5) (undo-tree-id936 . -5) (undo-tree-id937 . -5) (undo-tree-id938 . -5) (undo-tree-id939 . -5) (undo-tree-id940 . -5) (undo-tree-id941 . -5) (undo-tree-id942 . -5) (undo-tree-id943 . -5) (undo-tree-id944 . -5) (undo-tree-id945 . -5) (undo-tree-id946 . -5) (undo-tree-id947 . -5) (undo-tree-id948 . -5) (undo-tree-id949 . -5) (undo-tree-id950 . -5) (undo-tree-id951 . -5) (undo-tree-id952 . -5) (undo-tree-id953 . -5) (undo-tree-id954 . -5) (undo-tree-id955 . -5) (undo-tree-id956 . -5) (undo-tree-id957 . -5) (undo-tree-id958 . -5) (undo-tree-id959 . -5) (undo-tree-id960 . -5) (undo-tree-id961 . -5) (undo-tree-id962 . -5) (undo-tree-id963 . -5) (undo-tree-id964 . -5) (undo-tree-id965 . -5) (undo-tree-id966 . -5) (undo-tree-id967 . -5) (undo-tree-id968 . -5) (undo-tree-id969 . -5) (undo-tree-id970 . -5) (undo-tree-id971 . -5) (undo-tree-id972 . -5) (undo-tree-id973 . -5) (undo-tree-id974 . -5) (undo-tree-id975 . -5) (undo-tree-id976 . -5) (undo-tree-id977 . -5) (undo-tree-id978 . -5) (undo-tree-id979 . -5) (undo-tree-id980 . -5) (undo-tree-id981 . -5) (undo-tree-id982 . -5) (undo-tree-id983 . -5) (undo-tree-id984 . -5) (undo-tree-id985 . -5) (undo-tree-id986 . -5) (undo-tree-id987 . -5) (undo-tree-id988 . -5) (undo-tree-id989 . -5) (undo-tree-id990 . -5) (undo-tree-id991 . -5) (undo-tree-id992 . -5) (undo-tree-id993 . -5) (undo-tree-id994 . -5) (undo-tree-id995 . -5) (undo-tree-id996 . -5) (undo-tree-id997 . -5) (undo-tree-id998 . -5) (undo-tree-id999 . -5) (undo-tree-id1000 . -5) (undo-tree-id1001 . -5) (undo-tree-id1002 . -5) (undo-tree-id1003 . -5) (undo-tree-id1004 . -5) (undo-tree-id1005 . -5) (undo-tree-id1006 . -5) (undo-tree-id1007 . -5) (undo-tree-id1008 . -5) (undo-tree-id1009 . -5) (undo-tree-id1010 . -5) (undo-tree-id1011 . -5) (undo-tree-id1012 . -5) (undo-tree-id1013 . -5) (undo-tree-id1014 . -5) (undo-tree-id1015 . -5) (undo-tree-id1016 . -5) (undo-tree-id1017 . -5) (undo-tree-id1018 . -5) (undo-tree-id1019 . -5) (undo-tree-id1020 . -5) (undo-tree-id1021 . -5) (undo-tree-id1022 . -5) (undo-tree-id1023 . -5) (undo-tree-id1024 . -5) (undo-tree-id1025 . -5) (undo-tree-id1026 . -5) (undo-tree-id1027 . -5) (undo-tree-id1028 . -5) (undo-tree-id1029 . -5) (undo-tree-id1030 . -5) (undo-tree-id1031 . -5) (undo-tree-id1032 . -5) (undo-tree-id1033 . -5) (undo-tree-id1034 . -5) (undo-tree-id1035 . -5) (undo-tree-id1036 . -5) (undo-tree-id1037 . -5) (undo-tree-id1038 . -5) (undo-tree-id1039 . -5) (undo-tree-id1040 . -5) (undo-tree-id1041 . -5) (nil rear-nonsticky t 6005 . 6006)) (25387 7350 669723 857000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((6002 . 6003) (t 25387 6866 619172 91000)) ((#("
" 0 1 (fontified t ws-butler-chg chg)) . 6002) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1)) (25387 7292 757025 404000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((6009 . 6010) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -6009) (undo-tree-id81 . -1) 6010 (6003 . 6010) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -6003) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) 6004 (6003 . 6004) (6003 . 6004) (t 25387 6866 619172 91000) (5915 . 6002) (nil ws-butler-chg nil 5915 . 5916) (nil ws-butler-chg delete 5915 . 5916) (5914 . 5915) (#("
" 0 1 (fontified t face font-lock-doc-face)) . 5914) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (nil ws-butler-chg nil 5915 . 5916) (#("combine :: Shape -> Shape -> Shape
" 0 7 (fontified nil face haskell-definition-face) 7 8 (fontified nil) 8 10 (syntax-table (1) fontified nil face haskell-operator-face) 10 11 (fontified nil font-lock-multiline t haskell-type t) 11 16 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 16 17 (fontified nil font-lock-multiline t haskell-type t) 17 19 (syntax-table (1) fontified nil font-lock-multiline t haskell-type t face haskell-operator-face) 19 20 (fontified nil font-lock-multiline t haskell-type t) 20 25 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 25 26 (fontified nil font-lock-multiline t haskell-type t) 26 28 (syntax-table (1) fontified nil font-lock-multiline t haskell-type t face haskell-operator-face) 28 29 (fontified nil font-lock-multiline t haskell-type t) 29 34 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 34 35 (fontified nil font-lock-multiline t haskell-type t)) . 5915) (undo-tree-id137 . -35) (undo-tree-id138 . -34) (undo-tree-id139 . -35) (undo-tree-id140 . -35) (undo-tree-id141 . -34) (nil ws-butler-chg nil 5950 . 5951) (nil ws-butler-chg delete 5950 . 5951) (5949 . 5950) (#("
" 0 1 (fontified nil font-lock-multiline t haskell-type t)) . 5949) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (nil ws-butler-chg nil 5950 . 5951) (#("s1 `combine` s2 = a" 0 3 (fontified nil) 3 4 (font-lock-fontified t fontified nil face haskell-operator-face font-lock-multiline t) 4 11 (font-lock-fontified t fontified nil face haskell-definition-face font-lock-multiline t) 11 12 (font-lock-fontified t fontified nil face haskell-operator-face font-lock-multiline t) 12 16 (fontified nil) 16 17 (syntax-table (1) fontified nil face haskell-operator-face) 17 18 (fontified nil) 18 19 (fontified nil ws-butler-chg chg)) . 5950) (undo-tree-id147 . -19) (undo-tree-id148 . -18) (undo-tree-id149 . -18) (undo-tree-id150 . -18) (5968 . 5969) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id151 . -1) (5968 . 5969) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id152 . -9) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (undo-tree-id153 . -9) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (undo-tree-id154 . -9) (5968 . 5977) (#("UNDEFINED " 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face) 9 10 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id155 . -10) (nil ws-butler-chg nil 5978 . 5979) (nil ws-butler-chg delete 5978 . 5979) (5977 . 5978) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . 5977) (undo-tree-id156 . -1) (nil ws-butler-chg nil 5978 . 5979) (5968 . 5978) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id157 . -1) (5968 . 5969) (#("a" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id158 . -1) (5968 . 5969) (#("error \"A13 zipShapeWith undefined\"" 0 6 (fontified t) 6 34 (fontified t face font-lock-string-face)) . 5968) (undo-tree-id159 . -33) (t 25387 6866 619172 91000) (5968 . 6002) (#("a" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id160 . -1) (5968 . 5969) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id161 . -1) (5968 . 5969) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (undo-tree-id162 . -9) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . 5977) (undo-tree-id163 . -1) (nil ws-butler-chg delete 5978 . 5979) (5977 . 5978) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . 5977) (undo-tree-id164 . -1) (nil ws-butler-chg nil 5978 . 5979) (5968 . 5978) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (undo-tree-id165 . -9) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (undo-tree-id166 . -9) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id167 . -9) (5968 . 5977) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id168 . -1) (5968 . 5969) (#("a" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (undo-tree-id169 . -1) (5950 . 5969) (nil ws-butler-chg delete 5950 . 5951) (5949 . 5950) (#("
" 0 1 (fontified nil font-lock-multiline t haskell-type t)) . 5949) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (nil ws-butler-chg nil 5950 . 5951) (5915 . 5950) (nil ws-butler-chg delete 5915 . 5916) (5914 . 5915) (#("
" 0 1 (fontified t face font-lock-doc-face)) . 5914) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (nil ws-butler-chg nil 5915 . 5916) (#("combine :: Shape -> Shape -> Shape" 0 7 (fontified nil face haskell-definition-face) 7 8 (fontified nil) 8 10 (fontified nil syntax-table (1) face haskell-operator-face) 10 11 (fontified nil font-lock-multiline t haskell-type t) 11 16 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 16 17 (fontified nil font-lock-multiline t haskell-type t) 17 19 (fontified nil syntax-table (1) font-lock-multiline t haskell-type t face haskell-operator-face) 19 20 (fontified nil font-lock-multiline t haskell-type t) 20 25 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 25 26 (fontified nil font-lock-multiline t haskell-type t) 26 28 (fontified nil syntax-table (1) font-lock-multiline t haskell-type t face haskell-operator-face) 28 29 (fontified nil font-lock-multiline t haskell-type t) 29 34 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face)) . 5915) (undo-tree-id176 . -34) (undo-tree-id177 . -34) (undo-tree-id178 . -34) (#("
" 0 1 (fontified nil font-lock-multiline t haskell-type t)) . 5949) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("s1 `combine` s2 = " 0 3 (fontified nil) 3 4 (fontified nil font-lock-fontified t face haskell-operator-face font-lock-multiline t) 4 11 (fontified nil font-lock-fontified t face haskell-definition-face font-lock-multiline t) 11 12 (fontified nil font-lock-fontified t face haskell-operator-face font-lock-multiline t) 12 16 (fontified nil) 16 17 (fontified nil syntax-table (1) face haskell-operator-face) 17 18 (fontified nil)) . 5950) (undo-tree-id182 . -18) (undo-tree-id183 . -18) (#("error \"A13 zipShapeWith undefined\"" 0 6 (fontified t) 6 34 (fontified t face font-lock-string-face)) . 5968) (t 25387 6866 619172 91000) (#("
" 0 1 (fontified t ws-butler-chg chg)) . 6003) (undo-tree-id184 . -1) (undo-tree-id185 . 1) (6003 . 6004) (t 25387 6866 619172 91000) (5968 . 6002) (5950 . 5968) (5949 . 5950) (5915 . 5949) (nil ws-butler-chg delete 5915 . 5916) (5914 . 5915) (#("
" 0 1 (fontified t face font-lock-doc-face)) . -5914) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) 5915 (#("combine :: Shape -> Shape -> Shape" 0 7 (fontified t face haskell-definition-face) 7 8 (fontified t) 8 10 (fontified t syntax-table (1) face haskell-operator-face) 10 11 (fontified t font-lock-multiline t haskell-type t) 11 16 (fontified t font-lock-multiline t haskell-type t face haskell-type-face) 16 17 (fontified t font-lock-multiline t haskell-type t) 17 19 (fontified t syntax-table (1) font-lock-multiline t haskell-type t face haskell-operator-face) 19 20 (fontified t font-lock-multiline t haskell-type t) 20 25 (fontified t font-lock-multiline t haskell-type t face haskell-type-face) 25 26 (fontified t font-lock-multiline t haskell-type t) 26 28 (fontified t syntax-table (1) font-lock-multiline t haskell-type t face haskell-operator-face) 28 29 (fontified t font-lock-multiline t haskell-type t) 29 34 (fontified t font-lock-multiline t haskell-type t face haskell-type-face)) . -5915) (undo-tree-id191 . -34) (undo-tree-id192 . -34) (undo-tree-id193 . -34) (undo-tree-id194 . -34) 5949 (#("
" 0 1 (fontified t font-lock-multiline t haskell-type t)) . -5949) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) 5950 (nil ws-butler-chg delete 5950 . 5951) (5949 . 5950) (#("
" 0 1 (fontified t font-lock-multiline t haskell-type t)) . -5949) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) 5950 (#("s1 `combine` s2 = " 0 3 (fontified t) 3 4 (fontified t font-lock-fontified t face haskell-operator-face font-lock-multiline t) 4 11 (fontified t font-lock-fontified t face haskell-definition-face font-lock-multiline t) 11 12 (fontified t font-lock-fontified t face haskell-operator-face font-lock-multiline t) 12 16 (fontified t) 16 17 (fontified t syntax-table (1) face haskell-operator-face) 17 18 (fontified t)) . -5950) (undo-tree-id205 . -18) (undo-tree-id206 . -18) (undo-tree-id207 . -18) (undo-tree-id208 . -18) 5968 (#("a" 0 1 (fontified t ws-butler-chg chg)) . 5968) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (5968 . 5969) (#("n" 0 1 (fontified t ws-butler-chg chg)) . 5968) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (5968 . 5969) (#("undefined" 0 9 (fontified t ws-butler-chg chg)) . 5968) (undo-tree-id213 . -9) (undo-tree-id214 . -9) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified t ws-butler-chg chg face haskell-constructor-face)) . 5968) (undo-tree-id215 . -9) (undo-tree-id216 . -9) (5968 . 5977) (#("undefined" 0 9 (fontified t ws-butler-chg chg)) . -5968) 5977 (5968 . 5977) (#("UNDEFINED" 0 9 (fontified t ws-butler-chg chg face haskell-constructor-face)) . 5968) (undo-tree-id217 . -9) (undo-tree-id218 . -9) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified t ws-butler-chg chg face haskell-constructor-face)) . 5968) (undo-tree-id219 . -9) (undo-tree-id220 . -9) (#(" " 0 1 (fontified t ws-butler-chg chg)) . 5977) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (nil ws-butler-chg delete 5978 . 5979) (5977 . 5978) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -5977) (undo-tree-id223 . -1) (undo-tree-id224 . -1) 5978 (5977 . 5978) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified t ws-butler-chg chg face haskell-constructor-face)) . -5968) 5977 (5968 . 5977) (#("undefined" 0 9 (fontified t ws-butler-chg chg)) . -5968) 5977 (5968 . 5977) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -5968) (undo-tree-id225 . -1) (undo-tree-id226 . -1) 5969 (5968 . 5969) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -5968) (undo-tree-id227 . -1) (undo-tree-id228 . -1) 5969 (5968 . 5969) (#("error \"A13 zipShapeWith undefined\"" 0 6 (fontified t) 6 34 (fontified t face font-lock-string-face)) . -5968) (undo-tree-id229 . -34) (undo-tree-id230 . -34) 6002 (t 25387 6866 619172 91000)) ((5968 . 6002) (#("a" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5969) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5969) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . 5977) (nil ws-butler-chg delete 5978 . 5979) (5977 . 5978) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . 5977) (nil ws-butler-chg nil 5978 . 5979) (5968 . 5978) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5969) (#("a" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5950 . 5969) (nil ws-butler-chg delete 5950 . 5951) (5949 . 5950) (#("
" 0 1 (fontified nil font-lock-multiline t haskell-type t)) . 5949) (undo-tree-id417 . -1) (nil ws-butler-chg nil 5950 . 5951) (5915 . 5950) (nil ws-butler-chg delete 5915 . 5916) (5914 . 5915) (#("
" 0 1 (fontified nil face font-lock-doc-face)) . 5914) (undo-tree-id418 . -1) (nil ws-butler-chg nil 5915 . 5916) (#("combine :: Shape -> Shape -> Shape" 0 7 (fontified nil face haskell-definition-face) 7 8 (fontified nil) 8 10 (fontified nil syntax-table (1) face haskell-operator-face) 10 11 (fontified nil font-lock-multiline t haskell-type t) 11 16 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 16 17 (fontified nil font-lock-multiline t haskell-type t) 17 19 (fontified nil syntax-table (1) font-lock-multiline t haskell-type t face haskell-operator-face) 19 20 (fontified nil font-lock-multiline t haskell-type t) 20 25 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 25 26 (fontified nil font-lock-multiline t haskell-type t) 26 28 (fontified nil syntax-table (1) font-lock-multiline t haskell-type t face haskell-operator-face) 28 29 (fontified nil font-lock-multiline t haskell-type t) 29 34 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face)) . 5915) (undo-tree-id419 . -34) (#("
" 0 1 (fontified nil font-lock-multiline t haskell-type t)) . 5949) (undo-tree-id420 . -1) (#("s1 `combine` s2 = " 0 3 (fontified nil) 3 4 (fontified nil font-lock-fontified t face haskell-operator-face font-lock-multiline t) 4 11 (fontified nil font-lock-fontified t face haskell-definition-face font-lock-multiline t) 11 12 (fontified nil font-lock-fontified t face haskell-operator-face font-lock-multiline t) 12 16 (fontified nil) 16 17 (fontified nil syntax-table (1) face haskell-operator-face) 17 18 (fontified nil)) . 5950) (undo-tree-id421 . -18) (#("error \"A13 zipShapeWith undefined\"" 0 6 (fontified nil) 6 34 (fontified nil face font-lock-string-face)) . 5968) (t 25387 6866 619172 91000) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . 6003) (undo-tree-id422 . 1) (6003 . 6004) (t 25387 6866 619172 91000) (5915 . 6002) (nil ws-butler-chg nil 5915 . 5916) (nil ws-butler-chg delete 5915 . 5916) (5914 . 5915) (#("
" 0 1 (fontified nil face font-lock-doc-face)) . 5914) (undo-tree-id423 . -1) (nil ws-butler-chg nil 5915 . 5916) (#("combine :: Shape -> Shape -> Shape
" 0 7 (fontified nil face haskell-definition-face) 7 8 (fontified nil) 8 10 (syntax-table (1) fontified nil face haskell-operator-face) 10 11 (fontified nil font-lock-multiline t haskell-type t) 11 16 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 16 17 (fontified nil font-lock-multiline t haskell-type t) 17 19 (syntax-table (1) fontified nil font-lock-multiline t haskell-type t face haskell-operator-face) 19 20 (fontified nil font-lock-multiline t haskell-type t) 20 25 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 25 26 (fontified nil font-lock-multiline t haskell-type t) 26 28 (syntax-table (1) fontified nil font-lock-multiline t haskell-type t face haskell-operator-face) 28 29 (fontified nil font-lock-multiline t haskell-type t) 29 34 (fontified nil font-lock-multiline t haskell-type t face haskell-type-face) 34 35 (fontified nil font-lock-multiline t haskell-type t)) . 5915) (undo-tree-id424 . -35) (nil ws-butler-chg nil 5950 . 5951) (nil ws-butler-chg delete 5950 . 5951) (5949 . 5950) (#("
" 0 1 (fontified nil font-lock-multiline t haskell-type t)) . 5949) (undo-tree-id425 . -1) (nil ws-butler-chg nil 5950 . 5951) (#("s1 `combine` s2 = a" 0 3 (fontified nil) 3 4 (font-lock-fontified t fontified nil face haskell-operator-face font-lock-multiline t) 4 11 (font-lock-fontified t fontified nil face haskell-definition-face font-lock-multiline t) 11 12 (font-lock-fontified t fontified nil face haskell-operator-face font-lock-multiline t) 12 16 (fontified nil) 16 17 (syntax-table (1) fontified nil face haskell-operator-face) 17 18 (fontified nil) 18 19 (fontified nil ws-butler-chg chg)) . 5950) (undo-tree-id426 . -18) (5968 . 5969) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5969) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("UNDEFINED " 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face) 9 10 (fontified nil ws-butler-chg chg)) . 5968) (nil ws-butler-chg nil 5978 . 5979) (nil ws-butler-chg delete 5978 . 5979) (5977 . 5978) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . 5977) (nil ws-butler-chg nil 5978 . 5979) (5968 . 5978) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5969) (#("a" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5969) (#("error \"A13 zipShapeWith undefined\"" 0 6 (fontified nil) 6 34 (fontified nil face font-lock-string-face)) . 5968) (t 25387 6866 619172 91000) (5968 . 6002) (#("a" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5969) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5969) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("UNDEFINED " 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face) 9 10 (fontified nil ws-butler-chg chg)) . 5968) (nil ws-butler-chg nil 5978 . 5979) (nil ws-butler-chg delete 5978 . 5979) (5977 . 5978) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . 5977) (nil ws-butler-chg nil 5978 . 5979) (5968 . 5978) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("UNDEFINED" 0 9 (fontified nil ws-butler-chg chg face haskell-constructor-face)) . 5968) (5968 . 5977) (#("undefined" 0 9 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5977) (#("n" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5968 . 5969) (#("a" 0 1 (fontified nil ws-butler-chg chg)) . 5968) (5950 . 5969) (nil ws-butler-chg nil 5950 . 5951) (nil ws-butler-chg delete 5950 . 5951) (5949 . 5950) (#("
" 0 1 (fontified nil font-lock-multiline t haskell-type t)) . 5949) (undo-tree-id427 . -1) (nil ws-butler-chg nil 5950 . 5951) (5915 . 5950) (nil ws-butler-chg nil 5915 . 5916) (nil ws-butler-chg delete 5915 . 5916) (5914 . 5915) (#("
" 0 1 (fontified t face font-lock-doc-face)) . 5914) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (nil ws-butler-chg nil 5915 . 5916) (#("combine :: Shape -> Shape -> Shape
s1 `combine` s2 = error \"A13 zipShapeWith undefined\"" 0 7 (fontified t face haskell-definition-face) 7 8 (fontified t) 8 10 (fontified t syntax-table (1) face haskell-operator-face) 10 11 (fontified t font-lock-multiline t haskell-type t) 11 16 (fontified t font-lock-multiline t haskell-type t face haskell-type-face) 16 17 (fontified t font-lock-multiline t haskell-type t) 17 19 (fontified t syntax-table (1) font-lock-multiline t haskell-type t face haskell-operator-face) 19 20 (fontified t font-lock-multiline t haskell-type t) 20 25 (fontified t font-lock-multiline t haskell-type t face haskell-type-face) 25 26 (fontified t font-lock-multiline t haskell-type t) 26 28 (fontified t syntax-table (1) font-lock-multiline t haskell-type t face haskell-operator-face) 28 29 (fontified t font-lock-multiline t haskell-type t) 29 34 (fontified t font-lock-multiline t haskell-type t face haskell-type-face) 34 35 (fontified t font-lock-multiline t haskell-type t) 35 38 (fontified t) 38 39 (fontified t font-lock-fontified t face haskell-operator-face font-lock-multiline t) 39 46 (fontified t font-lock-fontified t face haskell-definition-face font-lock-multiline t) 46 47 (fontified t font-lock-fontified t face haskell-operator-face font-lock-multiline t) 47 51 (fontified t) 51 52 (fontified t syntax-table (1) face haskell-operator-face) 52 53 (fontified t) 53 59 (fontified t) 59 87 (fontified t face font-lock-string-face)) . 5915) (undo-tree-id430 . -53) (undo-tree-id431 . -53) (t 25387 6866 619172 91000) (#("
" 0 1 (fontified nil)) . 6003) (undo-tree-id432 . 1) (undo-tree-id433 . 1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("i" 0 1 (fontified nil ws-butler-chg chg)) . 6003) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (6003 . 6004) (#("abcdef " 0 5 (fontified nil ws-butler-chg chg) 5 6 (fontified nil ws-butler-chg chg) 6 7 (fontified nil ws-butler-chg chg)) . 6003) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -6) (undo-tree-id509 . -6) (undo-tree-id510 . -6) (undo-tree-id511 . -6) (undo-tree-id512 . -6) (undo-tree-id513 . -6) (undo-tree-id514 . -6) (undo-tree-id515 . -6) (undo-tree-id516 . -6) (undo-tree-id517 . -6) (undo-tree-id518 . -6) (undo-tree-id519 . -6) (undo-tree-id520 . -5) (undo-tree-id521 . -5) (undo-tree-id522 . -1) (undo-tree-id523 . -5) (undo-tree-id524 . -5) (undo-tree-id525 . -5) (undo-tree-id526 . -5) (undo-tree-id527 . -5) (undo-tree-id528 . -5) (undo-tree-id529 . -5) (undo-tree-id530 . -5) (undo-tree-id531 . -5) (undo-tree-id532 . -5) (undo-tree-id533 . -5) (undo-tree-id534 . -5) (undo-tree-id535 . -5) (undo-tree-id536 . -5) (undo-tree-id537 . -5) (undo-tree-id538 . -5) (undo-tree-id539 . -5) (undo-tree-id540 . -5) (undo-tree-id541 . -5) (undo-tree-id542 . -5) (undo-tree-id543 . -5) (undo-tree-id544 . -5) (undo-tree-id545 . -5) (undo-tree-id546 . -5) (undo-tree-id547 . -5) (undo-tree-id548 . -5) (undo-tree-id549 . -5) (undo-tree-id550 . -5) (undo-tree-id551 . -5) (undo-tree-id552 . -5) (undo-tree-id553 . -6) (undo-tree-id554 . -6) (undo-tree-id555 . -6) (undo-tree-id556 . -5) (undo-tree-id557 . -5) (undo-tree-id558 . -6) (undo-tree-id559 . -1) (undo-tree-id560 . -5) (undo-tree-id561 . -5) (undo-tree-id562 . -5) (undo-tree-id563 . -5) (undo-tree-id564 . -5) (undo-tree-id565 . -5) (undo-tree-id566 . -5) (undo-tree-id567 . -5) (undo-tree-id568 . -5) (undo-tree-id569 . -5) (undo-tree-id570 . -5) (undo-tree-id571 . -5) (undo-tree-id572 . -5) (undo-tree-id573 . -5) (undo-tree-id574 . -5) (undo-tree-id575 . -5) (undo-tree-id576 . -5) (undo-tree-id577 . -5) (undo-tree-id578 . -5) (undo-tree-id579 . -5) (undo-tree-id580 . -5) (undo-tree-id581 . -5) (undo-tree-id582 . -5) (undo-tree-id583 . -5) (undo-tree-id584 . -5) (undo-tree-id585 . -5) (undo-tree-id586 . -5) (undo-tree-id587 . -5) (undo-tree-id588 . -5) (undo-tree-id589 . -5) (undo-tree-id590 . -5) (undo-tree-id591 . -5) (undo-tree-id592 . -5) (undo-tree-id593 . -5) (undo-tree-id594 . -5) (undo-tree-id595 . -5) (undo-tree-id596 . -5) (6009 . 6010) (#("
" 0 1 (fontified t ws-butler-chg nil)) . 6009) (undo-tree-id597 . 1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . 1)) (25387 7288 779862 250000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
([nil nil ((nil rear-nonsticky nil 6010 . 6011) (nil fontified nil 6006 . 6011) (6006 . 6011)) ((#("abcde" 0 4 (ws-butler-chg chg fontified nil face font-lock-string-face) 4 5 (ws-butler-chg chg fontified nil rear-nonsticky nil face font-lock-string-face)) . 6006) (undo-tree-id777 . -5) (undo-tree-id778 . -5) (undo-tree-id779 . -5) (undo-tree-id780 . -5) (undo-tree-id781 . -5) (undo-tree-id782 . -5) (undo-tree-id783 . -5) (undo-tree-id784 . -5) (undo-tree-id785 . -5) (undo-tree-id786 . -5) (undo-tree-id787 . -5) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5) (undo-tree-id791 . -5) (undo-tree-id792 . -5) (undo-tree-id793 . -5) (undo-tree-id794 . -5) (undo-tree-id795 . -5) (undo-tree-id796 . -5) (undo-tree-id797 . -5) (undo-tree-id798 . -5) (undo-tree-id799 . -5) (undo-tree-id800 . -5) (undo-tree-id801 . -5) (undo-tree-id802 . -5) (undo-tree-id803 . -5) (undo-tree-id804 . -5) (undo-tree-id805 . -5) (undo-tree-id806 . -5) (undo-tree-id807 . -5) (undo-tree-id808 . -5) (undo-tree-id809 . -5) (undo-tree-id810 . -5) (undo-tree-id811 . -5) (undo-tree-id812 . -5) (undo-tree-id813 . -5) (undo-tree-id814 . -5) (undo-tree-id815 . -5) (undo-tree-id816 . -5) (undo-tree-id817 . -5) (undo-tree-id818 . -5) (undo-tree-id819 . -5) (undo-tree-id820 . -5) (undo-tree-id821 . -5) (undo-tree-id822 . -5) (undo-tree-id823 . -5) (undo-tree-id824 . -5) (undo-tree-id825 . -5) (undo-tree-id826 . -5) (undo-tree-id827 . -5) (undo-tree-id828 . -5) (undo-tree-id829 . -5) (undo-tree-id830 . -5) (undo-tree-id831 . -5) (undo-tree-id832 . -5) (undo-tree-id833 . -5) (undo-tree-id834 . -5) (undo-tree-id835 . -5) (undo-tree-id836 . -5) (undo-tree-id837 . -5) (undo-tree-id838 . -5) (undo-tree-id839 . -5) (undo-tree-id840 . -5) (undo-tree-id841 . -5) (undo-tree-id842 . -5) (undo-tree-id843 . -5) (undo-tree-id844 . -5) (undo-tree-id845 . -5) (undo-tree-id846 . -5) (undo-tree-id847 . -5) (undo-tree-id848 . -5) (undo-tree-id849 . -5) (undo-tree-id850 . -5) (undo-tree-id851 . -5) (undo-tree-id852 . -5) (undo-tree-id853 . -5) (undo-tree-id854 . -5) (undo-tree-id855 . -5) (undo-tree-id856 . -5) (undo-tree-id857 . -5) (undo-tree-id858 . -5) (undo-tree-id859 . -5) (undo-tree-id860 . -5) (undo-tree-id861 . -5) (undo-tree-id862 . -5) (undo-tree-id863 . -5) (undo-tree-id864 . -5) (undo-tree-id865 . -5) (undo-tree-id866 . -5) (undo-tree-id867 . -5) (undo-tree-id868 . -5) (undo-tree-id869 . -5) (undo-tree-id870 . -5) (undo-tree-id871 . -5) (undo-tree-id872 . -5) (undo-tree-id873 . -5) (undo-tree-id874 . -5) (undo-tree-id875 . -5) (undo-tree-id876 . -5) (undo-tree-id877 . -5) (undo-tree-id878 . -5) (undo-tree-id879 . -5) (undo-tree-id880 . -5) (undo-tree-id881 . -5) (undo-tree-id882 . -5) (undo-tree-id883 . -5) (undo-tree-id884 . -5) (undo-tree-id885 . -5) (undo-tree-id886 . -5) (undo-tree-id887 . -5) (undo-tree-id888 . -5) (undo-tree-id889 . -5) (undo-tree-id890 . -5) (undo-tree-id891 . -5) (undo-tree-id892 . -5) (undo-tree-id893 . -5) (undo-tree-id894 . -5) (nil rear-nonsticky t 6010 . 6011)) (25387 7350 446670 502000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((6003 . 6009)) ((#("asdasd" 0 6 (fontified t ws-butler-chg chg)) . 6003) (undo-tree-id612 . -6) (undo-tree-id613 . -6) (undo-tree-id614 . -5) (undo-tree-id615 . -6)) (25387 7292 756817 773000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((nil ws-butler-chg delete 6006 . 6007) (6003 . 6006) (#("abcde" 0 5 (fontified nil ws-butler-chg chg)) . 6003) (undo-tree-id239 . -5) (undo-tree-id240 . -5) (undo-tree-id241 . -5) (undo-tree-id242 . -5) (undo-tree-id243 . -5) (undo-tree-id244 . -5) (undo-tree-id245 . -5) (undo-tree-id246 . -5) (undo-tree-id247 . -5) (undo-tree-id248 . -5) (undo-tree-id249 . -5) (undo-tree-id250 . -5) (undo-tree-id251 . -5) (undo-tree-id252 . -5) (undo-tree-id253 . -5) (undo-tree-id254 . -5) (undo-tree-id255 . -5) (undo-tree-id256 . -5) (undo-tree-id257 . -5) (undo-tree-id258 . -5) (undo-tree-id259 . -5) (undo-tree-id260 . -5) (undo-tree-id261 . -5) (undo-tree-id262 . -1) (undo-tree-id263 . -5) (undo-tree-id264 . -5) (undo-tree-id265 . -5) (undo-tree-id266 . -5) (undo-tree-id267 . -5) (undo-tree-id268 . -5) (undo-tree-id269 . -5) (undo-tree-id270 . -5) (undo-tree-id271 . -5) (undo-tree-id272 . -5) (undo-tree-id273 . -5) (undo-tree-id274 . -5) (undo-tree-id275 . -5) (undo-tree-id276 . -5) (undo-tree-id277 . -5) (undo-tree-id278 . -5) (undo-tree-id279 . -5) (undo-tree-id280 . -5) (undo-tree-id281 . -5) (undo-tree-id282 . -5) (undo-tree-id283 . -5) (undo-tree-id284 . -5) (undo-tree-id285 . -5) (undo-tree-id286 . -5) (undo-tree-id287 . -5) (undo-tree-id288 . -5) (undo-tree-id289 . -5) (undo-tree-id290 . -5) (undo-tree-id291 . -5) (undo-tree-id292 . -5) (undo-tree-id294 . -5) (undo-tree-id296 . -5) (undo-tree-id298 . -5) (undo-tree-id300 . -5) (undo-tree-id301 . -5) (nil ws-butler-chg nil 6008 . 6009) (#("f" 0 1 (fontified t ws-butler-chg chg)) . 6008) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id324 . -1) (undo-tree-id326 . -1) (undo-tree-id328 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1)) ((6008 . 6009) (nil ws-butler-chg nil 6008 . 6009) (nil ws-butler-chg delete 6008 . 6009) (6003 . 6008) (#("asd" 0 3 (fontified nil ws-butler-chg chg)) . 6003) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -1) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (nil ws-butler-chg nil 6006 . 6007)) (25387 7288 642689 774000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 6015 . 6016) (nil fontified nil 6011 . 6016) (6011 . 6016)) ((#("abcde" 0 4 (ws-butler-chg chg fontified nil face font-lock-string-face) 4 5 (ws-butler-chg chg fontified nil rear-nonsticky nil face font-lock-string-face)) . 6011) (undo-tree-id698 . -5) (undo-tree-id699 . -5) (undo-tree-id700 . -5) (undo-tree-id701 . -5) (undo-tree-id702 . -5) (undo-tree-id703 . -5) (undo-tree-id704 . -5) (undo-tree-id705 . -5) (undo-tree-id706 . -5) (undo-tree-id707 . -5) (undo-tree-id708 . -5) (undo-tree-id709 . -5) (undo-tree-id710 . -5) (undo-tree-id711 . -5) (undo-tree-id712 . -5) (undo-tree-id713 . -5) (undo-tree-id714 . -5) (undo-tree-id715 . -5) (undo-tree-id716 . -5) (undo-tree-id717 . -5) (undo-tree-id718 . -5) (undo-tree-id719 . -5) (undo-tree-id720 . -5) (undo-tree-id721 . -5) (undo-tree-id722 . -5) (undo-tree-id723 . -5) (undo-tree-id724 . -5) (undo-tree-id725 . -5) (undo-tree-id726 . -5) (undo-tree-id727 . -5) (undo-tree-id728 . -5) (undo-tree-id729 . -5) (undo-tree-id730 . -5) (undo-tree-id731 . -5) (undo-tree-id732 . -5) (undo-tree-id733 . -5) (undo-tree-id734 . -5) (undo-tree-id735 . -5) (undo-tree-id736 . -5) (undo-tree-id737 . -5) (undo-tree-id738 . -5) (undo-tree-id739 . -5) (undo-tree-id740 . -5) (undo-tree-id741 . -5) (undo-tree-id742 . -5) (undo-tree-id743 . -5) (undo-tree-id744 . -5) (undo-tree-id745 . -5) (undo-tree-id746 . -5) (undo-tree-id747 . -5) (undo-tree-id748 . -5) (undo-tree-id749 . -5) (undo-tree-id750 . -5) (undo-tree-id751 . -5) (undo-tree-id752 . -5) (undo-tree-id753 . -5) (undo-tree-id754 . -5) (undo-tree-id755 . -5) (undo-tree-id756 . -5) (undo-tree-id757 . -5) (undo-tree-id758 . -5) (undo-tree-id759 . -5) (undo-tree-id760 . -5) (undo-tree-id761 . -5) (undo-tree-id762 . -5) (undo-tree-id763 . -5) (undo-tree-id764 . -5) (undo-tree-id765 . -5) (undo-tree-id766 . -5) (undo-tree-id767 . -5) (undo-tree-id768 . -5) (undo-tree-id769 . -5) (undo-tree-id770 . -5) (undo-tree-id771 . -5) (undo-tree-id772 . -5) (undo-tree-id773 . -5) (undo-tree-id774 . -5) (undo-tree-id775 . -5) (undo-tree-id776 . -5) (nil rear-nonsticky t 6015 . 6016)) (25387 7350 283855 681000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
([nil nil ((#("asd" 0 3 (fontified t ws-butler-chg chg)) . -6003) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id341 . -3) 6006) ((6003 . 6006)) (25387 7288 325906 95000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 6020 . 6021) (nil fontified nil 6016 . 6021) (6016 . 6021)) ((#("abcde" 0 4 (ws-butler-chg chg fontified nil face font-lock-string-face) 4 5 (ws-butler-chg chg fontified nil rear-nonsticky nil face font-lock-string-face)) . 6016) (undo-tree-id648 . -5) (undo-tree-id649 . -5) (undo-tree-id650 . -5) (undo-tree-id651 . -5) (undo-tree-id652 . -5) (undo-tree-id653 . -5) (undo-tree-id654 . -5) (undo-tree-id655 . -5) (undo-tree-id656 . -5) (undo-tree-id657 . -5) (undo-tree-id658 . -5) (undo-tree-id659 . -5) (undo-tree-id660 . -5) (undo-tree-id661 . -5) (undo-tree-id662 . -5) (undo-tree-id663 . -5) (undo-tree-id664 . -5) (undo-tree-id665 . -5) (undo-tree-id666 . -5) (undo-tree-id667 . -5) (undo-tree-id668 . -5) (undo-tree-id669 . -5) (undo-tree-id670 . -5) (undo-tree-id671 . -5) (undo-tree-id672 . -5) (undo-tree-id673 . -5) (undo-tree-id674 . -5) (undo-tree-id675 . -5) (undo-tree-id676 . -5) (undo-tree-id677 . -5) (undo-tree-id678 . -5) (undo-tree-id679 . -5) (undo-tree-id680 . -5) (undo-tree-id681 . -5) (undo-tree-id682 . -5) (undo-tree-id683 . -5) (undo-tree-id684 . -5) (undo-tree-id685 . -5) (undo-tree-id686 . -5) (undo-tree-id687 . -5) (undo-tree-id688 . -5) (undo-tree-id689 . -5) (undo-tree-id690 . -5) (undo-tree-id691 . -5) (undo-tree-id692 . -5) (undo-tree-id693 . -5) (undo-tree-id694 . -5) (undo-tree-id695 . -5) (undo-tree-id696 . -5) (undo-tree-id697 . -5) (nil rear-nonsticky t 6020 . 6021)) (25387 7349 867799 638000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((6003 . 6004)) ((#("_" 0 1 (fontified t ws-butler-chg chg face haskell-keyword-face)) . 6003) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1)) (25387 7288 196961 689000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 6025 . 6026) (nil fontified nil 6021 . 6026) (6021 . 6026)) ((#("abcde" 0 4 (ws-butler-chg chg fontified nil face font-lock-string-face) 4 5 (ws-butler-chg chg fontified nil rear-nonsticky nil face font-lock-string-face)) . 6021) (undo-tree-id632 . -5) (undo-tree-id633 . -5) (undo-tree-id634 . -5) (undo-tree-id635 . -5) (undo-tree-id636 . -5) (undo-tree-id637 . -5) (undo-tree-id638 . -5) (undo-tree-id639 . -5) (undo-tree-id640 . -5) (undo-tree-id641 . -5) (undo-tree-id642 . -5) (undo-tree-id643 . -5) (undo-tree-id644 . -5) (undo-tree-id645 . -5) (undo-tree-id646 . -5) (undo-tree-id647 . -5) (nil rear-nonsticky t 6025 . 6026)) (25387 7321 131481 719000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("_" 0 1 (fontified t ws-butler-chg chg face haskell-keyword-face)) . -6003) (undo-tree-id332 . -1) 6004) ((nil ws-butler-chg delete 6004 . 6005) (6003 . 6004)) (25387 7287 175076 650000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
([nil nil ((6003 . 6010)) ((#("asbcaer" 0 7 (fontified t ws-butler-chg chg)) . 6003) (undo-tree-id342 . -7) (undo-tree-id343 . -7) (undo-tree-id344 . -7) (undo-tree-id345 . -7) (undo-tree-id346 . -7) (undo-tree-id347 . -7) (undo-tree-id348 . -7) (undo-tree-id349 . -7)) (25387 7287 174865 671000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
